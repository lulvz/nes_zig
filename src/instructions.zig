pub const Opcode = enum {
    ADC, AND, ASL, ASLA, BCC, BCS, BEQ, BIT, BMI, BNE, BPL, BRK, BVC, BVS,
    CLC, CLD, CLI, CLV, CMP, CPX, CPY, DEC, DEX, DEY, EOR, INC, INX, INY,
    JMP, JSR, LDA, LDX, LDY, LSR, LSRA, NOP, ORA, PHA, PHP, PLA, PLP, 
    ROL, ROLA, ROR, RORA, RTI, RTS, SBC, SEC, SED, SEI, STA, STX, STY, 
    TAX, TAY, TSX, TXA, TXS, TYA,
    // Illegal opcodes
    ASO, LAX, RRA, SLO, SRE, ALR, ARR, SAX, XAA, AHX,
    TAS, SHY, SHX, LAS, AXS, ANC, RLA, DCP, ISC, KIL,
};

pub const AddressingMode = enum {
    ACCUMULATOR,
    IMMEDIATE,
    IMPLIED,
    RELATIVE,

    ABSOLUTE,
    ABSOLUTE_X,
    ABSOLUTE_Y,

    ZEROPAGE,
    ZEROPAGE_X,
    ZEROPAGE_Y,

    INDIRECT,
    INDEXED_INDIRECT,
    INDIRECT_INDEXED,
};

pub const Instruction = struct {
    opcode: Opcode = .NOP,
    addressing_mode: AddressingMode = .IMPLIED,
    cycles: u8,
};

pub const instruction_set = [_]Instruction{
    Instruction{ .opcode = .BRK, .addressing_mode = .IMPLIED, .cycles = 7 },
    Instruction{ .opcode = .ORA, .addressing_mode = .INDEXED_INDIRECT, .cycles = 6 },
    Instruction{ .opcode = .KIL, .addressing_mode = .IMPLIED, .cycles = 0 },
    Instruction{ .opcode = .SLO, .addressing_mode = .INDEXED_INDIRECT, .cycles = 8 },
    Instruction{ .opcode = .NOP, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .ORA, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .ASL, .addressing_mode = .ZEROPAGE, .cycles = 5 },
    Instruction{ .opcode = .SLO, .addressing_mode = .ZEROPAGE, .cycles = 5 },
    Instruction{ .opcode = .PHP, .addressing_mode = .IMPLIED, .cycles = 3 },
    Instruction{ .opcode = .ORA, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .ASLA, .addressing_mode = .ACCUMULATOR, .cycles = 2 },
    Instruction{ .opcode = .ANC, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .NOP, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .ORA, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .ASL, .addressing_mode = .ABSOLUTE, .cycles = 6 },
    Instruction{ .opcode = .SLO, .addressing_mode = .ABSOLUTE, .cycles = 6 },
    Instruction{ .opcode = .BPL, .addressing_mode = .RELATIVE, .cycles = 2 },
    Instruction{ .opcode = .ORA, .addressing_mode = .INDIRECT_INDEXED, .cycles = 5 },
    Instruction{ .opcode = .KIL, .addressing_mode = .IMPLIED, .cycles = 0 },
    Instruction{ .opcode = .SLO, .addressing_mode = .INDIRECT_INDEXED, .cycles = 8 },
    Instruction{ .opcode = .NOP, .addressing_mode = .ZEROPAGE_X, .cycles = 4 },
    Instruction{ .opcode = .ORA, .addressing_mode = .ZEROPAGE_X, .cycles = 4 },
    Instruction{ .opcode = .ASL, .addressing_mode = .ZEROPAGE_X, .cycles = 6 },
    Instruction{ .opcode = .SLO, .addressing_mode = .ZEROPAGE_X, .cycles = 6 },
    Instruction{ .opcode = .CLC, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .ORA, .addressing_mode = .ABSOLUTE_Y, .cycles = 4 },
    Instruction{ .opcode = .NOP, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .SLO, .addressing_mode = .ABSOLUTE_Y, .cycles = 7 },
    Instruction{ .opcode = .NOP, .addressing_mode = .ABSOLUTE_X, .cycles = 4 },
    Instruction{ .opcode = .ORA, .addressing_mode = .ABSOLUTE_X, .cycles = 4 },
    Instruction{ .opcode = .ASL, .addressing_mode = .ABSOLUTE_X, .cycles = 7 },
    Instruction{ .opcode = .SLO, .addressing_mode = .ABSOLUTE_X, .cycles = 7 },
    Instruction{ .opcode = .JSR, .addressing_mode = .ABSOLUTE, .cycles = 6 },
    Instruction{ .opcode = .AND, .addressing_mode = .INDEXED_INDIRECT, .cycles = 6 },
    Instruction{ .opcode = .KIL, .addressing_mode = .IMPLIED, .cycles = 0 },
    Instruction{ .opcode = .RLA, .addressing_mode = .INDEXED_INDIRECT, .cycles = 8 },
    Instruction{ .opcode = .BIT, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .AND, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .ROL, .addressing_mode = .ZEROPAGE, .cycles = 5 },
    Instruction{ .opcode = .RLA, .addressing_mode = .ZEROPAGE, .cycles = 5 },
    Instruction{ .opcode = .PLP, .addressing_mode = .IMPLIED, .cycles = 4 },
    Instruction{ .opcode = .AND, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .ROLA, .addressing_mode = .ACCUMULATOR, .cycles = 2 },
    Instruction{ .opcode = .ANC, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .BIT, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .AND, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .ROL, .addressing_mode = .ABSOLUTE, .cycles = 6 },
    Instruction{ .opcode = .RLA, .addressing_mode = .ABSOLUTE, .cycles = 6 },
    Instruction{ .opcode = .BMI, .addressing_mode = .RELATIVE, .cycles = 2 },
    Instruction{ .opcode = .AND, .addressing_mode = .INDIRECT_INDEXED, .cycles = 5 },
    Instruction{ .opcode = .KIL, .addressing_mode = .IMPLIED, .cycles = 0 },
    Instruction{ .opcode = .RLA, .addressing_mode = .INDIRECT_INDEXED, .cycles = 8 },
    Instruction{ .opcode = .NOP, .addressing_mode = .ZEROPAGE_X, .cycles = 4 },
    Instruction{ .opcode = .AND, .addressing_mode = .ZEROPAGE_X, .cycles = 4 },
    Instruction{ .opcode = .ROL, .addressing_mode = .ZEROPAGE_X, .cycles = 6 },
    Instruction{ .opcode = .RLA, .addressing_mode = .ZEROPAGE_X, .cycles = 6 },
    Instruction{ .opcode = .SEC, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .AND, .addressing_mode = .ABSOLUTE_Y, .cycles = 4 },
    Instruction{ .opcode = .NOP, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .RLA, .addressing_mode = .ABSOLUTE_Y, .cycles = 7 },
    Instruction{ .opcode = .NOP, .addressing_mode = .ABSOLUTE_X, .cycles = 4 },
    Instruction{ .opcode = .AND, .addressing_mode = .ABSOLUTE_X, .cycles = 4 },
    Instruction{ .opcode = .ROL, .addressing_mode = .ABSOLUTE_X, .cycles = 7 },
    Instruction{ .opcode = .RLA, .addressing_mode = .ABSOLUTE_X, .cycles = 7 },
    Instruction{ .opcode = .RTI, .addressing_mode = .IMPLIED, .cycles = 6 },
    Instruction{ .opcode = .EOR, .addressing_mode = .INDEXED_INDIRECT, .cycles = 6 },
    Instruction{ .opcode = .KIL, .addressing_mode = .IMPLIED, .cycles = 0 },
    Instruction{ .opcode = .SRE, .addressing_mode = .INDEXED_INDIRECT, .cycles = 8 },
    Instruction{ .opcode = .NOP, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .EOR, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .LSR, .addressing_mode = .ZEROPAGE, .cycles = 5 },
    Instruction{ .opcode = .SRE, .addressing_mode = .ZEROPAGE, .cycles = 5 },
    Instruction{ .opcode = .PHA, .addressing_mode = .IMPLIED, .cycles = 3 },
    Instruction{ .opcode = .EOR, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .LSRA, .addressing_mode = .ACCUMULATOR, .cycles = 2 },
    Instruction{ .opcode = .ALR, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .JMP, .addressing_mode = .ABSOLUTE, .cycles = 3 },
    Instruction{ .opcode = .EOR, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .LSR, .addressing_mode = .ABSOLUTE, .cycles = 6 },
    Instruction{ .opcode = .SRE, .addressing_mode = .ABSOLUTE, .cycles = 6 },
    Instruction{ .opcode = .BVC, .addressing_mode = .RELATIVE, .cycles = 2 },
    Instruction{ .opcode = .EOR, .addressing_mode = .INDIRECT_INDEXED, .cycles = 5 },
    Instruction{ .opcode = .KIL, .addressing_mode = .IMPLIED, .cycles = 0 },
    Instruction{ .opcode = .SRE, .addressing_mode = .INDIRECT_INDEXED, .cycles = 8 },
    Instruction{ .opcode = .NOP, .addressing_mode = .ZEROPAGE_X, .cycles = 4 },
    Instruction{ .opcode = .EOR, .addressing_mode = .ZEROPAGE_X, .cycles = 4 },
    Instruction{ .opcode = .LSR, .addressing_mode = .ZEROPAGE_X, .cycles = 6 },
    Instruction{ .opcode = .SRE, .addressing_mode = .ZEROPAGE_X, .cycles = 6 },
    Instruction{ .opcode = .CLI, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .EOR, .addressing_mode = .ABSOLUTE_Y, .cycles = 4 },
    Instruction{ .opcode = .NOP, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .SRE, .addressing_mode = .ABSOLUTE_Y, .cycles = 7 },
    Instruction{ .opcode = .NOP, .addressing_mode = .ABSOLUTE_X, .cycles = 4 },
    Instruction{ .opcode = .EOR, .addressing_mode = .ABSOLUTE_X, .cycles = 4 },
    Instruction{ .opcode = .LSR, .addressing_mode = .ABSOLUTE_X, .cycles = 7 },
    Instruction{ .opcode = .SRE, .addressing_mode = .ABSOLUTE_X, .cycles = 7 },
    Instruction{ .opcode = .RTS, .addressing_mode = .IMPLIED, .cycles = 6 },
    Instruction{ .opcode = .ADC, .addressing_mode = .INDEXED_INDIRECT, .cycles = 6 },
    Instruction{ .opcode = .KIL, .addressing_mode = .IMPLIED, .cycles = 0 },
    Instruction{ .opcode = .RRA, .addressing_mode = .INDEXED_INDIRECT, .cycles = 8 },
    Instruction{ .opcode = .NOP, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .ADC, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .ROR, .addressing_mode = .ZEROPAGE, .cycles = 5 },
    Instruction{ .opcode = .RRA, .addressing_mode = .ZEROPAGE, .cycles = 5 },
    Instruction{ .opcode = .PLA, .addressing_mode = .IMPLIED, .cycles = 4 },
    Instruction{ .opcode = .ADC, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .RORA, .addressing_mode = .ACCUMULATOR, .cycles = 2 },
    Instruction{ .opcode = .ARR, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .JMP, .addressing_mode = .INDIRECT, .cycles = 5 },
    Instruction{ .opcode = .ADC, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .ROR, .addressing_mode = .ABSOLUTE, .cycles = 6 },
    Instruction{ .opcode = .RRA, .addressing_mode = .ABSOLUTE, .cycles = 6 },
    Instruction{ .opcode = .BVS, .addressing_mode = .RELATIVE, .cycles = 2 },
    Instruction{ .opcode = .ADC, .addressing_mode = .INDIRECT_INDEXED, .cycles = 5 },
    Instruction{ .opcode = .KIL, .addressing_mode = .IMPLIED, .cycles = 0 },
    Instruction{ .opcode = .RRA, .addressing_mode = .INDIRECT_INDEXED, .cycles = 8 },
    Instruction{ .opcode = .NOP, .addressing_mode = .ZEROPAGE_X, .cycles = 4 },
    Instruction{ .opcode = .ADC, .addressing_mode = .ZEROPAGE_X, .cycles = 4 },
    Instruction{ .opcode = .ROR, .addressing_mode = .ZEROPAGE_X, .cycles = 6 },
    Instruction{ .opcode = .RRA, .addressing_mode = .ZEROPAGE_X, .cycles = 6 },
    Instruction{ .opcode = .SEI, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .ADC, .addressing_mode = .ABSOLUTE_Y, .cycles = 4 },
    Instruction{ .opcode = .NOP, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .RRA, .addressing_mode = .ABSOLUTE_Y, .cycles = 7 },
    Instruction{ .opcode = .NOP, .addressing_mode = .ABSOLUTE_X, .cycles = 4 },
    Instruction{ .opcode = .ADC, .addressing_mode = .ABSOLUTE_X, .cycles = 4 },
    Instruction{ .opcode = .ROR, .addressing_mode = .ABSOLUTE_X, .cycles = 7 },
    Instruction{ .opcode = .RRA, .addressing_mode = .ABSOLUTE_X, .cycles = 7 },
    Instruction{ .opcode = .NOP, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .STA, .addressing_mode = .INDEXED_INDIRECT, .cycles = 6 },
    Instruction{ .opcode = .NOP, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .SAX, .addressing_mode = .INDEXED_INDIRECT, .cycles = 6 },
    Instruction{ .opcode = .STY, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .STA, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .STX, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .SAX, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .DEY, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .NOP, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .TXA, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .XAA, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .STY, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .STA, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .STX, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .SAX, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .BCC, .addressing_mode = .RELATIVE, .cycles = 2 },
    Instruction{ .opcode = .STA, .addressing_mode = .INDIRECT_INDEXED, .cycles = 6 },
    Instruction{ .opcode = .KIL, .addressing_mode = .IMPLIED, .cycles = 0 },
    Instruction{ .opcode = .AHX, .addressing_mode = .INDIRECT_INDEXED, .cycles = 6 },
    Instruction{ .opcode = .STY, .addressing_mode = .ZEROPAGE_X, .cycles = 4 },
    Instruction{ .opcode = .STA, .addressing_mode = .ZEROPAGE_X, .cycles = 4 },
    Instruction{ .opcode = .STX, .addressing_mode = .ZEROPAGE_Y, .cycles = 4 },
    Instruction{ .opcode = .SAX, .addressing_mode = .ZEROPAGE_Y, .cycles = 4 },
    Instruction{ .opcode = .TYA, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .STA, .addressing_mode = .ABSOLUTE_Y, .cycles = 5 },
    Instruction{ .opcode = .TXS, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .TAS, .addressing_mode = .ABSOLUTE_Y, .cycles = 5 },
    Instruction{ .opcode = .SHY, .addressing_mode = .ABSOLUTE_X, .cycles = 5 },
    Instruction{ .opcode = .STA, .addressing_mode = .ABSOLUTE_X, .cycles = 5 },
    Instruction{ .opcode = .SHX, .addressing_mode = .ABSOLUTE_Y, .cycles = 5 },
    Instruction{ .opcode = .AHX, .addressing_mode = .ABSOLUTE_Y, .cycles = 5 },
    Instruction{ .opcode = .LDY, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .LDA, .addressing_mode = .INDEXED_INDIRECT, .cycles = 6 },
    Instruction{ .opcode = .LDX, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .LAX, .addressing_mode = .INDEXED_INDIRECT, .cycles = 6 },
    Instruction{ .opcode = .LDY, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .LDA, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .LDX, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .LAX, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .TAY, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .LDA, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .TAX, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .LAX, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .LDY, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .LDA, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .LDX, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .LAX, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .BCS, .addressing_mode = .RELATIVE, .cycles = 2 },
    Instruction{ .opcode = .LDA, .addressing_mode = .INDIRECT_INDEXED, .cycles = 5 },
    Instruction{ .opcode = .KIL, .addressing_mode = .IMPLIED, .cycles = 0 },
    Instruction{ .opcode = .LAX, .addressing_mode = .INDIRECT_INDEXED, .cycles = 5 },
    Instruction{ .opcode = .LDY, .addressing_mode = .ZEROPAGE_X, .cycles = 4 },
    Instruction{ .opcode = .LDA, .addressing_mode = .ZEROPAGE_X, .cycles = 4 },
    Instruction{ .opcode = .LDX, .addressing_mode = .ZEROPAGE_Y, .cycles = 4 },
    Instruction{ .opcode = .LAX, .addressing_mode = .ZEROPAGE_Y, .cycles = 4 },
    Instruction{ .opcode = .CLV, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .LDA, .addressing_mode = .ABSOLUTE_Y, .cycles = 4 },
    Instruction{ .opcode = .TSX, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .LAS, .addressing_mode = .ABSOLUTE_Y, .cycles = 4 },
    Instruction{ .opcode = .LDY, .addressing_mode = .ABSOLUTE_X, .cycles = 4 },
    Instruction{ .opcode = .LDA, .addressing_mode = .ABSOLUTE_X, .cycles = 4 },
    Instruction{ .opcode = .LDX, .addressing_mode = .ABSOLUTE_Y, .cycles = 4 },
    Instruction{ .opcode = .LAX, .addressing_mode = .ABSOLUTE_Y, .cycles = 4 },
    Instruction{ .opcode = .CPY, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .CMP, .addressing_mode = .INDEXED_INDIRECT, .cycles = 6 },
    Instruction{ .opcode = .NOP, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .DCP, .addressing_mode = .INDEXED_INDIRECT, .cycles = 8 },
    Instruction{ .opcode = .CPY, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .CMP, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .DEC, .addressing_mode = .ZEROPAGE, .cycles = 5 },
    Instruction{ .opcode = .DCP, .addressing_mode = .ZEROPAGE, .cycles = 5 },
    Instruction{ .opcode = .INY, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .CMP, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .DEX, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .AXS, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .CPY, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .CMP, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .DEC, .addressing_mode = .ABSOLUTE, .cycles = 6 },
    Instruction{ .opcode = .DCP, .addressing_mode = .ABSOLUTE, .cycles = 6 },
    Instruction{ .opcode = .BNE, .addressing_mode = .RELATIVE, .cycles = 2 },
    Instruction{ .opcode = .CMP, .addressing_mode = .INDIRECT_INDEXED, .cycles = 5 },
    Instruction{ .opcode = .KIL, .addressing_mode = .IMPLIED, .cycles = 0 },
    Instruction{ .opcode = .DCP, .addressing_mode = .INDIRECT_INDEXED, .cycles = 8 },
    Instruction{ .opcode = .NOP, .addressing_mode = .ZEROPAGE_X, .cycles = 4 },
    Instruction{ .opcode = .CMP, .addressing_mode = .ZEROPAGE_X, .cycles = 4 },
    Instruction{ .opcode = .DEC, .addressing_mode = .ZEROPAGE_X, .cycles = 6 },
    Instruction{ .opcode = .DCP, .addressing_mode = .ZEROPAGE_X, .cycles = 6 },
    Instruction{ .opcode = .CLD, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .CMP, .addressing_mode = .ABSOLUTE_Y, .cycles = 4 },
    Instruction{ .opcode = .NOP, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .DCP, .addressing_mode = .ABSOLUTE_Y, .cycles = 7 },
    Instruction{ .opcode = .NOP, .addressing_mode = .ABSOLUTE_X, .cycles = 4 },
    Instruction{ .opcode = .CMP, .addressing_mode = .ABSOLUTE_X, .cycles = 4 },
    Instruction{ .opcode = .DEC, .addressing_mode = .ABSOLUTE_X, .cycles = 7 },
    Instruction{ .opcode = .DCP, .addressing_mode = .ABSOLUTE_X, .cycles = 7 },
    Instruction{ .opcode = .CPX, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .SBC, .addressing_mode = .INDEXED_INDIRECT, .cycles = 6 },
    Instruction{ .opcode = .NOP, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .ISC, .addressing_mode = .INDEXED_INDIRECT, .cycles = 8 },
    Instruction{ .opcode = .CPX, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .SBC, .addressing_mode = .ZEROPAGE, .cycles = 3 },
    Instruction{ .opcode = .INC, .addressing_mode = .ZEROPAGE, .cycles = 5 },
    Instruction{ .opcode = .ISC, .addressing_mode = .ZEROPAGE, .cycles = 5 },
    Instruction{ .opcode = .INX, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .SBC, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .NOP, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .SBC, .addressing_mode = .IMMEDIATE, .cycles = 2 },
    Instruction{ .opcode = .CPX, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .SBC, .addressing_mode = .ABSOLUTE, .cycles = 4 },
    Instruction{ .opcode = .INC, .addressing_mode = .ABSOLUTE, .cycles = 6 },
    Instruction{ .opcode = .ISC, .addressing_mode = .ABSOLUTE, .cycles = 6 },
    Instruction{ .opcode = .BEQ, .addressing_mode = .RELATIVE, .cycles = 2 },
    Instruction{ .opcode = .SBC, .addressing_mode = .INDIRECT_INDEXED, .cycles = 5 },
    Instruction{ .opcode = .KIL, .addressing_mode = .IMPLIED, .cycles = 0 },
    Instruction{ .opcode = .ISC, .addressing_mode = .INDIRECT_INDEXED, .cycles = 8 },
    Instruction{ .opcode = .NOP, .addressing_mode = .ZEROPAGE_X, .cycles = 4 },
    Instruction{ .opcode = .SBC, .addressing_mode = .ZEROPAGE_X, .cycles = 4 },
    Instruction{ .opcode = .INC, .addressing_mode = .ZEROPAGE_X, .cycles = 6 },
    Instruction{ .opcode = .ISC, .addressing_mode = .ZEROPAGE_X, .cycles = 6 },
    Instruction{ .opcode = .SED, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .SBC, .addressing_mode = .ABSOLUTE_Y, .cycles = 4 },
    Instruction{ .opcode = .NOP, .addressing_mode = .IMPLIED, .cycles = 2 },
    Instruction{ .opcode = .ISC, .addressing_mode = .ABSOLUTE_Y, .cycles = 7 },
    Instruction{ .opcode = .NOP, .addressing_mode = .ABSOLUTE_X, .cycles = 4 },
    Instruction{ .opcode = .SBC, .addressing_mode = .ABSOLUTE_X, .cycles = 4 },
    Instruction{ .opcode = .INC, .addressing_mode = .ABSOLUTE_X, .cycles = 7 },
    Instruction{ .opcode = .ISC, .addressing_mode = .ABSOLUTE_X, .cycles = 7 },
};
